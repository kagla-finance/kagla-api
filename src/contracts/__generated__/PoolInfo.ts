/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PoolInfoInterface extends utils.Interface {
  contractName: "PoolInfo";
  functions: {
    "get_pool_coins(address)": FunctionFragment;
    "get_pool_info(address)": FunctionFragment;
    "address_provider()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "get_pool_coins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_pool_info",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "address_provider",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "get_pool_coins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_pool_info",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "address_provider",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PoolInfo extends BaseContract {
  contractName: "PoolInfo";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get_pool_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        coins: string[];
        underlying_coins: string[];
        decimals: BigNumber[];
        underlying_decimals: BigNumber[];
      }
    >;

    get_pool_info(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          A: BigNumber;
          future_A: BigNumber;
          fee: BigNumber;
          admin_fee: BigNumber;
          future_fee: BigNumber;
          future_admin_fee: BigNumber;
          future_owner: string;
          initial_A: BigNumber;
          initial_A_time: BigNumber;
          future_A_time: BigNumber;
        },
        boolean,
        string,
        BigNumber,
        string
      ] & {
        balances: BigNumber[];
        underlying_balances: BigNumber[];
        decimals: BigNumber[];
        underlying_decimals: BigNumber[];
        rates: BigNumber[];
        lp_token: string;
        lp_token_total_supply: BigNumber;
        lp_token_virtual_price: BigNumber;
        lp_token_symbol: string;
        params: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          A: BigNumber;
          future_A: BigNumber;
          fee: BigNumber;
          admin_fee: BigNumber;
          future_fee: BigNumber;
          future_admin_fee: BigNumber;
          future_owner: string;
          initial_A: BigNumber;
          initial_A_time: BigNumber;
          future_A_time: BigNumber;
        };
        is_meta: boolean;
        name: string;
        asset_type: BigNumber;
        base_pool: string;
      }
    >;

    address_provider(overrides?: CallOverrides): Promise<[string]>;
  };

  get_pool_coins(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[], BigNumber[]] & {
      coins: string[];
      underlying_coins: string[];
      decimals: BigNumber[];
      underlying_decimals: BigNumber[];
    }
  >;

  get_pool_info(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      string,
      BigNumber,
      BigNumber,
      string,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        A: BigNumber;
        future_A: BigNumber;
        fee: BigNumber;
        admin_fee: BigNumber;
        future_fee: BigNumber;
        future_admin_fee: BigNumber;
        future_owner: string;
        initial_A: BigNumber;
        initial_A_time: BigNumber;
        future_A_time: BigNumber;
      },
      boolean,
      string,
      BigNumber,
      string
    ] & {
      balances: BigNumber[];
      underlying_balances: BigNumber[];
      decimals: BigNumber[];
      underlying_decimals: BigNumber[];
      rates: BigNumber[];
      lp_token: string;
      lp_token_total_supply: BigNumber;
      lp_token_virtual_price: BigNumber;
      lp_token_symbol: string;
      params: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        A: BigNumber;
        future_A: BigNumber;
        fee: BigNumber;
        admin_fee: BigNumber;
        future_fee: BigNumber;
        future_admin_fee: BigNumber;
        future_owner: string;
        initial_A: BigNumber;
        initial_A_time: BigNumber;
        future_A_time: BigNumber;
      };
      is_meta: boolean;
      name: string;
      asset_type: BigNumber;
      base_pool: string;
    }
  >;

  address_provider(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    get_pool_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], BigNumber[]] & {
        coins: string[];
        underlying_coins: string[];
        decimals: BigNumber[];
        underlying_decimals: BigNumber[];
      }
    >;

    get_pool_info(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        string,
        BigNumber,
        BigNumber,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          A: BigNumber;
          future_A: BigNumber;
          fee: BigNumber;
          admin_fee: BigNumber;
          future_fee: BigNumber;
          future_admin_fee: BigNumber;
          future_owner: string;
          initial_A: BigNumber;
          initial_A_time: BigNumber;
          future_A_time: BigNumber;
        },
        boolean,
        string,
        BigNumber,
        string
      ] & {
        balances: BigNumber[];
        underlying_balances: BigNumber[];
        decimals: BigNumber[];
        underlying_decimals: BigNumber[];
        rates: BigNumber[];
        lp_token: string;
        lp_token_total_supply: BigNumber;
        lp_token_virtual_price: BigNumber;
        lp_token_symbol: string;
        params: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          A: BigNumber;
          future_A: BigNumber;
          fee: BigNumber;
          admin_fee: BigNumber;
          future_fee: BigNumber;
          future_admin_fee: BigNumber;
          future_owner: string;
          initial_A: BigNumber;
          initial_A_time: BigNumber;
          future_A_time: BigNumber;
        };
        is_meta: boolean;
        name: string;
        asset_type: BigNumber;
        base_pool: string;
      }
    >;

    address_provider(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    get_pool_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_pool_info(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    address_provider(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    get_pool_coins(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_pool_info(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    address_provider(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
