/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LiquidityGaugeV3Interface extends utils.Interface {
  contractName: "LiquidityGaugeV3";
  functions: {
    "decimals()": FunctionFragment;
    "integrate_checkpoint()": FunctionFragment;
    "user_checkpoint(address)": FunctionFragment;
    "claimable_tokens(address)": FunctionFragment;
    "reward_contract()": FunctionFragment;
    "last_claim()": FunctionFragment;
    "claimed_reward(address,address)": FunctionFragment;
    "claimable_reward(address,address)": FunctionFragment;
    "claimable_reward_write(address,address)": FunctionFragment;
    "set_rewards_receiver(address)": FunctionFragment;
    "claim_rewards()": FunctionFragment;
    "kick(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "set_rewards(address,bytes32,address[8])": FunctionFragment;
    "set_killed(bool)": FunctionFragment;
    "commit_transfer_ownership(address)": FunctionFragment;
    "accept_transfer_ownership()": FunctionFragment;
    "minter()": FunctionFragment;
    "kgl_token()": FunctionFragment;
    "lp_token()": FunctionFragment;
    "controller()": FunctionFragment;
    "voting_escrow()": FunctionFragment;
    "future_epoch_time()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "working_balances(address)": FunctionFragment;
    "working_supply()": FunctionFragment;
    "period()": FunctionFragment;
    "period_timestamp(uint256)": FunctionFragment;
    "integrate_inv_supply(uint256)": FunctionFragment;
    "integrate_inv_supply_of(address)": FunctionFragment;
    "integrate_checkpoint_of(address)": FunctionFragment;
    "integrate_fraction(address)": FunctionFragment;
    "inflation_rate()": FunctionFragment;
    "reward_tokens(uint256)": FunctionFragment;
    "rewards_receiver(address)": FunctionFragment;
    "reward_integral(address)": FunctionFragment;
    "reward_integral_for(address,address)": FunctionFragment;
    "admin()": FunctionFragment;
    "future_admin()": FunctionFragment;
    "is_killed()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "user_checkpoint",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_tokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_contract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "last_claim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimed_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_reward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_reward_write",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rewards_receiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_rewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rewards",
    values: [string, BytesLike, string[]]
  ): string;
  encodeFunctionData(functionFragment: "set_killed", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accept_transfer_ownership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "kgl_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "working_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "working_supply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "period_timestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint_of",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_fraction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inflation_rate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards_receiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_integral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_integral_for",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is_killed", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "last_claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimed_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_reward_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_rewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_killed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accept_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kgl_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "working_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "period_timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_fraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflation_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_integral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_integral_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_killed", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CommitOwnership(address)": EventFragment;
    "ApplyOwnership(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidityLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyOwnership"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { provider: string; value: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { provider: string; value: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type UpdateLiquidityLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    original_balance: BigNumber;
    original_supply: BigNumber;
    working_balance: BigNumber;
    working_supply: BigNumber;
  }
>;

export type UpdateLiquidityLimitEventFilter =
  TypedEventFilter<UpdateLiquidityLimitEvent>;

export type CommitOwnershipEvent = TypedEvent<[string], { admin: string }>;

export type CommitOwnershipEventFilter = TypedEventFilter<CommitOwnershipEvent>;

export type ApplyOwnershipEvent = TypedEvent<[string], { admin: string }>;

export type ApplyOwnershipEventFilter = TypedEventFilter<ApplyOwnershipEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { _owner: string; _spender: string; _value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface LiquidityGaugeV3 extends BaseContract {
  contractName: "LiquidityGaugeV3";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityGaugeV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reward_contract(overrides?: CallOverrides): Promise<[string]>;

    last_claim(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimable_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimable_reward_write(
      _addr: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim_rewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kick(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_rewards(
      _reward_contract: string,
      _sigs: BytesLike,
      _reward_tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    kgl_token(overrides?: CallOverrides): Promise<[string]>;

    lp_token(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    voting_escrow(overrides?: CallOverrides): Promise<[string]>;

    future_epoch_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    working_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inflation_rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reward_integral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    is_killed(overrides?: CallOverrides): Promise<[boolean]>;
  };

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

  user_checkpoint(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable_tokens(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  reward_contract(overrides?: CallOverrides): Promise<string>;

  last_claim(overrides?: CallOverrides): Promise<BigNumber>;

  claimed_reward(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable_reward(
    _addr: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimable_reward_write(
    _addr: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_rewards_receiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim_rewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim_rewards(address)"(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim_rewards(address,address)"(
    _addr: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kick(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    _value: BigNumberish,
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,bool)"(
    _value: BigNumberish,
    _addr: string,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,bool)"(
    _value: BigNumberish,
    _claim_rewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _added_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: string,
    _subtracted_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_rewards(
    _reward_contract: string,
    _sigs: BytesLike,
    _reward_tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_killed(
    _is_killed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  kgl_token(overrides?: CallOverrides): Promise<string>;

  lp_token(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  working_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  working_supply(overrides?: CallOverrides): Promise<BigNumber>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  period_timestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_inv_supply_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_checkpoint_of(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  integrate_fraction(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

  reward_tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  reward_integral(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reward_integral_for(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  is_killed(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    user_checkpoint(addr: string, overrides?: CallOverrides): Promise<boolean>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_contract(overrides?: CallOverrides): Promise<string>;

    last_claim(overrides?: CallOverrides): Promise<BigNumber>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward_write(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim_rewards()"(overrides?: CallOverrides): Promise<void>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kick(addr: string, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    set_rewards(
      _reward_contract: string,
      _sigs: BytesLike,
      _reward_tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    set_killed(_is_killed: boolean, overrides?: CallOverrides): Promise<void>;

    commit_transfer_ownership(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    accept_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    kgl_token(overrides?: CallOverrides): Promise<string>;

    lp_token(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    voting_escrow(overrides?: CallOverrides): Promise<string>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewards_receiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    reward_integral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    is_killed(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Deposit(address,uint256)"(
      provider?: string | null,
      value?: null
    ): DepositEventFilter;
    Deposit(provider?: string | null, value?: null): DepositEventFilter;

    "Withdraw(address,uint256)"(
      provider?: string | null,
      value?: null
    ): WithdrawEventFilter;
    Withdraw(provider?: string | null, value?: null): WithdrawEventFilter;

    "UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)"(
      user?: null,
      original_balance?: null,
      original_supply?: null,
      working_balance?: null,
      working_supply?: null
    ): UpdateLiquidityLimitEventFilter;
    UpdateLiquidityLimit(
      user?: null,
      original_balance?: null,
      original_supply?: null,
      working_balance?: null,
      working_supply?: null
    ): UpdateLiquidityLimitEventFilter;

    "CommitOwnership(address)"(admin?: null): CommitOwnershipEventFilter;
    CommitOwnership(admin?: null): CommitOwnershipEventFilter;

    "ApplyOwnership(address)"(admin?: null): ApplyOwnershipEventFilter;
    ApplyOwnership(admin?: null): ApplyOwnershipEventFilter;

    "Transfer(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): TransferEventFilter;
    Transfer(
      _from?: string | null,
      _to?: string | null,
      _value?: null
    ): TransferEventFilter;

    "Approval(address,address,uint256)"(
      _owner?: string | null,
      _spender?: string | null,
      _value?: null
    ): ApprovalEventFilter;
    Approval(
      _owner?: string | null,
      _spender?: string | null,
      _value?: null
    ): ApprovalEventFilter;
  };

  estimateGas: {
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    integrate_checkpoint(overrides?: CallOverrides): Promise<BigNumber>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_contract(overrides?: CallOverrides): Promise<BigNumber>;

    last_claim(overrides?: CallOverrides): Promise<BigNumber>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable_reward_write(
      _addr: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim_rewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kick(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_rewards(
      _reward_contract: string,
      _sigs: BytesLike,
      _reward_tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    kgl_token(overrides?: CallOverrides): Promise<BigNumber>;

    lp_token(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    working_supply(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflation_rate(overrides?: CallOverrides): Promise<BigNumber>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_integral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    is_killed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrate_checkpoint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user_checkpoint(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable_tokens(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_contract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_claim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimed_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable_reward(
      _addr: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimable_reward_write(
      _addr: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_rewards_receiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim_rewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim_rewards(address)"(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim_rewards(address,address)"(
      _addr: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kick(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      _value: BigNumberish,
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,bool)"(
      _value: BigNumberish,
      _addr: string,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,bool)"(
      _value: BigNumberish,
      _claim_rewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      _spender: string,
      _added_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtracted_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_rewards(
      _reward_contract: string,
      _sigs: BytesLike,
      _reward_tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_killed(
      _is_killed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kgl_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    working_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    working_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period_timestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_inv_supply_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_checkpoint_of(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrate_fraction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflation_rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward_tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards_receiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_integral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_integral_for(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    is_killed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
